== What is this ?

A tool that generates an API documentation using RSpec and some DSL magic.
If successful I might use it for my own project (neo4j.rb)
*This is an early experiment !*

=== How ?

Instead of writing specs like this:

  describe Account do
      context "transfering money" do
        it "deposits transfer amount to the other account" do
          source = Account.new(50, :USD)
          target = mock('target account')
          target.should_receive(:deposit).with(Money.new(5, :USD))
          source.transfer(5, :USD).to(target)
        end

        it "reduces its balance by the transfer amount" do
          source = Account.new(50, :USD)
          target = stub('target account')
          source.transfer(5, :USD).to(target)
          source.balance.should == Money.new(45, :USD)
        end
      end
    end

Which generates the following output

    $ spec ./spec/account_spec.rb --format nested
    Account
      transfering money
        deposits transfer amount to the other account
        reduces its balance by the transfer amount
  
    2 examples, 0 failures

I want to generate an API documentation something like this from an RSpec Macro DSL.

  Account
    Public Class Methods
      #new() 
        return value: Account with 0 USD
           has #balance == 0
           has #currency == 'USD'
      #new(50:Fixnum, 'USD':String)
         return value: Account with 50 USD
           has #balance == 50
           has #currency == 'USD'

    Public Instance Methods
      #transfer(5:Fixnum, 'USD':String)
         given Account with 50 USD
           return value: A transfer of 5 USD from Account with 50 USD
             has #target == nil
             is kind of TransactionBuilder
         given Account has 0 USD 
             throws an Exception

  TransactionBuilder
    Public Class Methods
      #new(source_account:Account with 50 USD, 5:Fixnum, 'USD':String) 
         return value: A transfer of 5 USD from Account with 50 USD
           has #amount == 50
           has #currency == 'USD'
           has #source_account == "Account with 50 USD"

    Public Instance Methods
      #to(target_account:Account with 0 USD) 
         given A transfer of 5 USD from Account with 50 USD
           target_account 
             has #balance == 5
             has #currency == 'USD'
           #source_account has
             has #balance == 45
             has #currency == 'USD'
      #source_account
         given TransactionBuilder transfer 5 USD from Account with 50 USD
         return value
            is Account with 50 USD
   
With an input like this
  describe Account do
    context "Public Class Methods" do
      new() do
        return_value("Account with 0 USD") do
           it {balance.should == 0}
           it {currency.should == 'USD'}
        end

      new(5, 'USD') do
        return_value("Account with 0 USD") do
           it {balance.should == 0}
           it {currency.should == 'USD'}
        end

    end

    context "Public Instance Methods" do
      transfer(5, 'USD') do
        given("Account with 50 USD") do
          return_value("A transfer of 5 USD from Account with 50 USD") do
             it { should kind_of(TransactionBuilder)}
          end
        end
        given("Account with 0 USD") do
          throws_exception(SomeExceptionClass)
        end
    end
  end

  describe TransactionBuilder do
    context "Public Class Methods" do
      new(fixture(:source_account, "Account with 50 USD"), 5, 'USD' ) do
        return_value("A transfer of 5 USD from Account with 50 USD") do
          it { subject.amount.should == 50 }
          it { subject.source_account == fixture(:source_account)}
      end

    context "Public Instance Methods" do
      to(fixture(:target_account)) do
        given("A transfer of 5 USD from Account with 50 USD") do
          target_account do
            it { subject.balance == 5 }
            it { subject.currency == 'USD' }
          end
          source_account do
            it { subject.balance == 45 }
            it { subject.currency == 'USD' }
          end
        end
      end

=== Example
 gem install rspec --prerelease (2.0.0.beta.19)
 rspec -f d -c spec