== What is this ?

A tool that generates an API documentation using RSpec and some DSL magic.
If successful I might use it for my own project (neo4j.rb)
<b>This is an early experiment !</b>

=== How ?

Instead of writing specs like this:

  describe Account do
      context "transfering money" do
        it "deposits transfer amount to the other account" do
          source = Account.new(50, :USD)
          target = mock('target account')
          target.should_receive(:deposit).with(Money.new(5, :USD))
          source.transfer(5, :USD).to(target)
        end

        it "reduces its balance by the transfer amount" do
          source = Account.new(50, :USD)
          target = stub('target account')
          source.transfer(5, :USD).to(target)
          source.balance.should == Money.new(45, :USD)
        end
      end
    end

Which generates the following output

    $ spec ./spec/account_spec.rb --format nested
    Account
      transfering money
        deposits transfer amount to the other account
        reduces its balance by the transfer amount
  
    2 examples, 0 failures

I want to generate an API documentation something like this from an RSpec Macro DSL.

  Account
    Public Class Methods
      #new()
        then return value: Account with 0 USD
           has #balance == 0
           has #currency == 'USD'
      #new(amount, currency)
         scenario 'account and currency has valid values'
           given amount 50
           given currency 'USD'
           then return_value: "Account with 50 USD"
             has #amount == 50
             has #currency == 'USD'
         scenario 'an unknown currency'
           given amount 50
           given currency QD!
           then subject throws an exception

    Public Instance Methods
      #transfer(amount, currency)
         scenario 'account and currency has valid values'
           given amount 50
           given currency 'USD'
           then return value: A transfer of 5 USD from Account with 50 USD
             has #target == nil
             is kind of TransactionBuilder
           then TODO TODO TODO
         scenario 'account has to little money'
           given amount 50
           given currency 'USD'
           then subject throws an exception

  TransferDSL
    Public Class Methods
      #new(source_account, amount, currency)
         given source_account Account with 50 USD
         given amount 50
         given currency 'USD'
         then return value: A transfer of 5 USD from Account with 50 USD
           has #amount == 50
           has #currency == 'USD'
           has #source_account == "Account with 50 USD"

    Public Instance Methods
      #to(target_account)
         scenario 'source account has enough money'
           given target_account: Account with 0 USD
           given subject: A transfer of 5 USD from Account with 50 USD
           then target_account is an Account with 5 USD
             has amount 50
             has currency 'USD'
           then subject#source_account Source Account with 45 USD
             has amount 45
             has currency 'USD'

         scenario 'source account does not have enough money'
           ...

With an input like this

  describe Account do
    static_methods do
      new do
        return_value("Account with 0 USD") do
  #        it_behaves_like "Account with 0 USD" can also be used
          it("has #balance == 0") { subject.balance.should == 0 }
          it("has #currency == 'USD") { subject.currency.should == 'USD' }
        end
      end

      # can also use the static_method instead of calling with new
      new(arg(:amount, 50), arg(:currency, 'USD')) do
        scenario 'account and currency has valid values'
        return_value("Account with 50 USD") do
          it("has #balance == 50") { subject.balance.should == 50 }
          it("has #currency == 'USD") { subject.currency.should == 'USD' }
        end
      end

      new(arg(:amount, 50), arg(:currency,'UX!D')) do
        scenario 'an unknown currency'
        throws(Error)
      end

    end

    instance_methods do
      transfer(arg(:amount, 50), arg(:currency, 'USD')) do
        given(Account.fixture(:account_50)) do
          scenario 'account and currency has valid values'
          return_value("A transfer of 5 USD from Account with 50 USD") do
            it { should be_kind_of(TransferDSL) }
          end
          it "does not modify balance" do
            subject.balance.should == 50
          end
        end
      end
    end

    add_fixture(:account_50, Account) do
       create { Account.new(50, 'USD') }
    end
  end

  describe TransferDSL do
    static_methods do
      new(arg(:source_account, :account_50)) do
        return_value("A Transfer DSL with a source account") do
           it {subject.source_account.balance.should  == fixture(:account_50).create.balance}
           it {subject.source_account.currency.should == fixture(:account_50).create.currency'}
        end

    end

    instance_methods do
      to(arg(:target_account, :account_10), arg(:amount, 5), arg(:currency, 'USD')) do
        given(TransferDSL.fixture(:transfer_from_50)) do
          scenario 'source account has enough money'
          describe_arg(:target_account) do
             it "should add the amount to the target account" { subject.amount.should == fixture(:account_10).create.amount + arg(:amount) }
          end
          it("should take money from the source account") { subject.source_account.balance.should == fixture(:transfer_from_50} - arg(:amount) }
        end
      end

      to(arg(:target_account, :account_10), arg(:amount, 5), arg(:currency, 'USD')) do
        given(TransferDSL.fixture(:transfer_from_5)) do
          scenario 'source account does NOT have enough money'
          describe_arg(:target_account) do
             it "should add the amount to the target account" { subject.amount.should == fixture(:account_10).create.amount + arg(:amount) }
          end
          should_raise(Error)
        end

    end

    add_fixture(:transfer_from_50, TransferDSL) do
       create { TransferDSL.new(Account.fixture(:account_50)) }
    end

    add_fixture(:transfer_from_5, TransferDSL) do
       create { TransferDSL.new(Account.fixture(:account_5)) }
    end

    add_fixture(:account_50, Account) do
       create { Account.new(50, 'USD') }
    end

  end


A future goal is to merge the RDoc with the output of rspec-apigen, not sure how ...


=== Example
 gem install rspec --prerelease (2.0.0.beta.19)
 rspec -f d -c spec